:host {
  display: block;

  /**
   * @prop --size: the component size
   * @default: 12rem
   */
  width: var(--size, 12rem);
  height: var(--size, 12rem);

  /**
   * @prop --margin: the component margin
   * @default: 0 auto
   */
  margin: var(--margin, 0 auto);

  position: relative;

  --zIndex: 0;
}

svg {
  width: 100%;
  aspect-ratio: 1 / 1;
}

@supports not (aspect-ratio: 1 / 1) {
  svg {
    width: 100%;
    height: 100%;
  }
}

button {
  border: none;
  margin: 0;
  padding: 0;

  background: transparent;
  color: inherit;
  font: inherit;

  cursor: pointer;

  /**
   * @prop --inner-margin: a margin that reduces the smiley size in comparison to its host
   * @default: 3rem
   */
  width: calc(var(--size, 12rem) - var(--inner-margin, 3rem));
  height: calc(var(--size, 12rem) - var(--inner-margin, 3rem));

  &:focus,
  &:active {
    /**
     * @prop --outline: the outline around the smiley button
     * @default: none
     */
    outline: var(--outline, none);
  }

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  /**
   * @prop --zIndex: the smiley button z-index
   */
  z-index: var(--zIndex);
}

label {
  position: absolute;
  top: 50%;
  left: 50%;

  /**
   * @prop --text-top: an offset to display the question and labels
   * @default: 1.6rem
   */
  transform: translate(-50%, calc(-1 * ((var(--size, 12rem) - var(--text-top, 1.4rem)) / 2)));

  pointer-events: none;

  &.question {
    transform: translate(-50%, -50%);

    z-index: calc(var(--zIndex) + 1);
  }

  /**
   * @prop --text-font-size: text font-size
   * @default: 1rem
   */
  font-size: var(--text-font-size, 1rem);
  /**
   * @prop --text-font-weight: text font-weight
   * @default: 800
   */
  font-weight: var(--text-font-weight, 800);
  /**
   * @prop --text-line-height: text line-height
   * @default: calc(4rem / 3)
   */
  line-height: var(--text-line-height, calc(4rem / 3));
  /**
   * @prop --text-font-family: text font-family
   * @default: inherit
   */
  font-family: var(--text-font-family, inherit);

  text-align: center;

  &.state {
    visibility: hidden;
    opacity: 0;

    transition: opacity 0.15s ease-in;

    &.visible {
      visibility: visible;
      opacity: 1;
    }
  }
}
